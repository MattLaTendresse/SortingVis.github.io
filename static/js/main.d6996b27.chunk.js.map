{"version":3,"sources":["SortingAlgorithms/SortingAlgorithms.js","sortingVis/Popup.js","sortingVis/SortVis.jsx","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getBubbleSortAnimations","helperArray","x","swapped","swap","bubbleSort","firstIndex","secondIndex","temp","Popup","props","trigger","className","children","screenWidth","window","innerWidth","screenHeight","innerHeight","SortVis","probs","numberOfBars","primaryColor","secondaryColor","barHeight","state","this","resetArray","low","up","random","backgroundColor","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","newHeight","height","console","log","position","insertionSort","getInsertionSortAnimations","isColorChange","barOneIndex","barTwoIndex","barIndex","barStyle","map","value","idx","onClick","mergeSort","setTrigger","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d6996b27.chunk.js","sourcesContent":["import {useState} from 'react';\n\nexport function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, j]);\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, i]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([j, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n}\n\n\n\n//divide and conquer algo \n//breaks it into smaller sorted arrays based on an index\nexport function quickSortHelp(array,left,right){\n  const animations = [];\n  var index;\n  if (array.length > 1) {\n      index = partition(array, left, right,animations); //index returned from partition\n      if (left < index - 1) { //more elements on the left side of the pivot\n          quickSortHelp(array, left, index - 1);\n      }\n      if (index < right) { //more elements on the right side of the pivot\n          quickSortHelp(array, index, right);\n      }\n  }\n  return animations;\n}\nfunction partition(array = [], left, right, animations = []) {\n  let pivot = array[Math.floor((right + left) / 2)],\n      i = left,\n      j = right;\n  while (i <= j) {\n      while (array[i] < pivot) i++;\n\n      while (array[j] > pivot) j--;\n\n      if (i <= j) {\n          swap(array,i, j);\n          animations.push([i, j, array[i++], array[j--]]);\n      }\n  }\n  return i;\n}\n\n\nexport function getBubbleSortAnimations(array) {\n  let animations = [];\n  let helperArray = array.slice();\n  bubbleSort(helperArray, animations);\n  return animations;\n}\n\nfunction bubbleSort(helperArray, animations) {\n  const length = helperArray.length;\n  let x = length - 1;\n  while (x > 0) {\n    let swapped = false;\n    for (let i = 0; i < x; ++i) {\n      animations.push([\"comparison1\", i, i + 1]);\n      animations.push([\"comparison2\", i, i + 1]);\n      if (helperArray[i] > helperArray[i + 1]) {\n        swapped = true;\n        animations.push([\"swap\", i, helperArray[i + 1]]);\n        animations.push([\"swap\", i + 1, helperArray[i]]);\n        swap(helperArray, i, i + 1);\n      }\n    }\n    if (!swapped) break;\n    x--;\n  }\n}\n\nexport function getInsertionSortAnimations(array) {\n  let animations = [];\n  let helperArray = array.slice();\n  insertionSort(helperArray, animations);\n  return animations;\n}\n\nfunction insertionSort(helperArray, animations) {\n  const length = helperArray.length;\n  for (let i = 1; i < length; i++) {\n    let position = helperArray[i];\n    let j = i - 1;\n    animations.push([\"comparison1\", j, i]);\n    animations.push([\"comparison2\", j, i]);\n    while (j >= 0 && helperArray[j] > position) {\n      animations.push([\"overwrite\", j + 1, helperArray[j]]);\n      helperArray[j + 1] = helperArray[j];\n      j = j - 1;\n      if (j >= 0) {\n        animations.push([\"comparison1\", j, i]);\n        animations.push([\"comparison2\", j, i]);\n      }\n    }\n    animations.push([\"overwrite\", j + 1, position]);\n    helperArray[j + 1] = position;\n  }\n}\n\nfunction swap(helperArray, firstIndex, secondIndex) {\n  let temp = helperArray[firstIndex];\n  helperArray[firstIndex] = helperArray[secondIndex];\n  helperArray[secondIndex] = temp;\n}\n\n","import React from 'react'\nimport './Popup.css'\nimport {useState} from 'react';\n\nfunction Popup(props){\n   // const [buttonPopup,setButtonPopup] = useState(false);\n    return(props.trigger) ? (\n        <div className=\"Popup\">\n            <div className = \"PopupInner\">          \n                {props.children}\n            </div>\n        </div>\n    ): \"\";\n}\n\nexport default Popup;","import React from 'react';\nimport {getMergeSortAnimations,getInsertionSortAnimations,getBubbleSortAnimations} from '../SortingAlgorithms/SortingAlgorithms.js';\nimport './SortVis.css';\nimport Popup from './Popup'\nimport './Popup.css'\n\n\n\nconst screenWidth = window.innerWidth;\nconst screenHeight = window.innerHeight;\n//const [buttonPopup,setButtonPopup] = useState(false);\n\n\n\nexport default class SortVis extends React.Component{\n  \n    //array constructor\n    constructor(probs){\n      super(probs);\n    \n    this.numberOfBars = screenWidth / 4 - 20;\n    this.primaryColor = \"aqua\";\n    this.secondaryColor = \"red\";\n    this.barHeight = screenHeight - 100;\n  \n        this.state ={\n            array: [], \n            Popup:false\n        };\n    }\n\n    //reset array\n    componentDidMount(){\n        this.resetArray();\n    }\n    //define array reset \n    resetArray(){\n      \n        const array=[];\n        for(let i=0;i<this.numberOfBars;i++){\n            array.push(randomInt(10,this.barHeight));\n            array.backgroundColor = 'black';\n        }\n        \n        this.setState({array});\n    }\n\n    \n\n    //sorts\n    mergeSort(){\n        const animations = getMergeSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? 'black' : 'green';\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * 1);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * 1);\n        }\n        }\n        console.log(animations);\n    }\n\n     insertionSort(){\n      const animations = getInsertionSortAnimations(this.state.array);\n      for (let i = 0; i < animations.length; i++) {\n        const isColorChange = animations[i][0] === \"comparison1\" || animations[i][0] === \"comparison2\";\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\n        if (isColorChange === true) {\n          const color = animations[i][0] === \"comparison1\" ? 'black' : 'green';\n          const [, barOneIndex, barTwoIndex] = animations[i];\n          const barOneStyle = arrayBars[barOneIndex].style;\n          const barTwoStyle = arrayBars[barTwoIndex].style;\n          setTimeout(() => {\n            barOneStyle.backgroundColor = color;\n            barTwoStyle.backgroundColor = color;\n          }, i *0.45);\n        } else {\n          const [, barIndex, newHeight] = animations[i];\n          const barStyle = arrayBars[barIndex].style;\n          setTimeout(() => {\n            barStyle.height = `${newHeight}px`;\n          }, i * 0.45);\n        }\n      }\n\n    }\n\n\n    bubbleSort(){\n      const animations = getBubbleSortAnimations(this.state.array);\n      for (let i = 0; i < animations.length; i++) {\n        const isColorChange = animations[i][0] === \"comparison1\" || animations[i][0] === \"comparison2\";\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\n        if (isColorChange) {\n          const color = animations[i][0] === \"comparison2\" ? 'green': 'black';\n          const [, barOneIndex, barTwoIndex] = animations[i];\n          const barOneStyle = arrayBars[barOneIndex].style;\n          const barTwoStyle = arrayBars[barTwoIndex].style;\n          setTimeout(() => {\n            barOneStyle.backgroundColor = color;\n            barTwoStyle.backgroundColor = color;\n          }, i * 0.75);\n        } else {\n          const [, barIndex, newHeight] = animations[i];\n          if (barIndex === -1) {\n            continue;\n          }\n          \n          const barStyle = arrayBars[barIndex].style;\n          setTimeout(() => {\n            barStyle.height = `${newHeight}px`;\n          }, i * 0.75);\n    }\n  }\n    \n}\n \n\n  \n\n\n    //render our the array to screen \n    render() {\n        const {array} = this.state;\n\n    return (\n      <div className = \"body\">\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div className=\"array-bar\" key={idx} style={{ backgroundColor: 'black', height: `${value}px`,}}></div>\n        ))}\n            <button className =\"button\" onClick={() => this.resetArray()}>Generate New Array</button>\n            <button className =\"button\" onClick={() => {this.mergeSort();this.setState({Popup: true})}}>Merge Sort</button>\n            <button className =\"button\" onClick={() => {this.insertionSort();this.setState({Popup: true})}}>Insertion Sort</button>\n            <button className =\"button\" onClick={() => {this.bubbleSort();this.setState({Popup: true})}}>Bubble Sort</button>\n            <Popup trigger={this.state.Popup == true} setTrigger={this.state.Popup == false}>\n              <button  className=\"close\" onClick={() => {this.setState({Popup: false})}}>close</button>\n              <h3>Sorting Algorithms, and their time and space complexity!</h3>\n              <p>Merge Sort: Average time complexity O(nLogn), space complexity is O(n)</p>\n              <p>Insertion Sort: Average time complexity O(n^2), space complexity is O(1)</p>\n              <p>Bubble Sort: Average time complexity O(n^2), space complexity is O(1)</p>\n              </Popup>\n        </div>\n        </div>\n        );\n    \n    }\n}\n\n//random number func\nfunction randomInt(low,up) {\n        return Math.floor(Math.random() *  (up - low +1)+low);\n    }\n","import React from 'react';\nimport SortVis from './sortingVis/SortVis';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortVis></SortVis>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}